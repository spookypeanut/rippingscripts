#!/usr/bin/env python

from __future__ import print_function, division, absolute_import
from builtins import input
import os
import argparse
from seriesfind import Finder
from rip import rip_track, add_handbrake_flags, get_handbrake_flags


def parse_arguments():
    p = argparse.ArgumentParser()
    p.add_argument("--name", help="The name of the TV program")
    p.add_argument("--series", help="The series number")
    p.add_argument("--start", help="The episode number to start at")
    p.add_argument("--tracks", help="The tracks to rip")
    p = add_handbrake_flags(p)
    return p.parse_args()


def main():
    args = parse_arguments()
    hbflags = get_handbrake_flags(args)

    if args.tracks:
        tracks = map(int, args.tracks.strip().split(" "))
    else:
        tracks = Finder().find_series()
    print(tracks)
    print("Tracks to rip: %s (%s in total)" % (tracks, len(tracks)))
    if args.name:
        name = args.name
    else:
        print("Enter name of the TV series")
        name = input()
    if args.series:
        series = int(args.series)
    else:
        print("Enter the series number (leave blank for none)")
        series = input()
        if series == "":
            series = None
        else:
            series = int(series)
    if args.start:
        start = args.start
    else:
        print("Enter the starting episode number (leave blank for 1)")
        start = input()
        if start == "":
            start = 1
        else:
            start = int(start)

    if series is None:
        base = os.path.join(name, "DVD")
    else:
        base = os.path.join(name, "DVD", "Series %s" % series)

    msg = "Ripping %s episodes (tracks %s) starting at %s"
    print(msg % (len(tracks), tracks, start))
    try:
        os.makedirs(base)
    except OSError:
        if not os.path.exists(base):
            raise
    for (episode_num, track_num) in enumerate(tracks, start=int(start)):
        basename = "%s.s%02de%02d" % (name, series, episode_num)
        out = os.path.join(base, basename)
        print("=" * 50)
        print("Ripping DVD track %s to file %s" % (track_num, out))
        print("=" * 50)
        rip_track(out, track_num=track_num, handbrake_flags=hbflags)
    print("Finished ripping %s episodes to %s" % (len(tracks), base))


if __name__ == "__main__":
    main()
